{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a quaternary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing four input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - quaternary callback\n* @returns {void}\n*\n* @example\n* var add = require( '@stdlib/math-base-ops-add4' );\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0, 0 ];\n*\n* quaternary( [ x, y, z, w, u ], shape, strides, offsets, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction quaternary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar su;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar iu;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar u;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tiw = offsets[ 3 ];\n\tiu = offsets[ 4 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tsu = strides[ 4 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tu = arrays[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tu[ iu ] = fcn( x[ ix ], y[ iy ], z[ iz ], w[ iw ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t\tiu += su;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = quaternary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a quaternary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing four input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - quaternary callback\n* @returns {void}\n*\n* @example\n* var add = require( '@stdlib/math-base-ops-add4' );\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n*\n* quaternary( [ x, y, z, w, u ], shape, strides, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction quaternary( arrays, shape, strides, fcn ) {\n\tvar offsets;\n\tvar N;\n\n\tN = shape[ 0 ];\n\toffsets = [\n\t\tstride2offset( N, strides[ 0 ] ),\n\t\tstride2offset( N, strides[ 1 ] ),\n\t\tstride2offset( N, strides[ 2 ] ),\n\t\tstride2offset( N, strides[ 3 ] ),\n\t\tstride2offset( N, strides[ 4 ] )\n\t];\n\treturn ndarray( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quaternary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a quaternary callback to strided input array elements and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided-base-quaternary\n*\n* @example\n* var add = require( '@stdlib/math-base-ops-add4' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var quaternary = require( '@stdlib/strided-base-quaternary' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n*\n* quaternary( [ x, y, z, w, u ], shape, strides, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*\n* @example\n* var add = require( '@stdlib/math-base-ops-add4' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var quaternary = require( '@stdlib/strided-base-quaternary' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0, 0 ];\n*\n* quaternary.ndarray( [ x, y, z, w, u ], shape, strides, offsets, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAmDA,SAASC,EAAYC,EAAQC,EAAOC,EAASC,EAASC,EAAM,CAC3D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAInB,EAAO,CAAE,EACR,EAAAmB,GAAK,GAkBV,IAfAV,EAAKP,EAAS,CAAE,EAChBQ,EAAKR,EAAS,CAAE,EAChBS,EAAKT,EAAS,CAAE,EAChBU,EAAKV,EAAS,CAAE,EAChBW,EAAKX,EAAS,CAAE,EAChBE,EAAKH,EAAS,CAAE,EAChBI,EAAKJ,EAAS,CAAE,EAChBK,EAAKL,EAAS,CAAE,EAChBM,EAAKN,EAAS,CAAE,EAChBO,EAAKP,EAAS,CAAE,EAChBa,EAAIf,EAAQ,CAAE,EACdgB,EAAIhB,EAAQ,CAAE,EACdiB,EAAIjB,EAAQ,CAAE,EACdkB,EAAIlB,EAAQ,CAAE,EACdmB,EAAInB,EAAQ,CAAE,EACRqB,EAAI,EAAGA,EAAID,EAAGC,IACnBF,EAAGL,CAAG,EAAIV,EAAKW,EAAGL,CAAG,EAAGM,EAAGL,CAAG,EAAGM,EAAGL,CAAG,EAAGM,EAAGL,CAAG,CAAE,EAClDH,GAAML,EACNM,GAAML,EACNM,GAAML,EACNM,GAAML,EACNM,GAAML,CAER,CAKAX,EAAO,QAAUC,ICtGjB,IAAAuB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAgCd,SAASC,EAAYC,EAAQC,EAAOC,EAASC,EAAM,CAClD,IAAIC,EACAC,EAEJ,OAAAA,EAAIJ,EAAO,CAAE,EACbG,EAAU,CACTP,EAAeQ,EAAGH,EAAS,CAAE,CAAE,EAC/BL,EAAeQ,EAAGH,EAAS,CAAE,CAAE,EAC/BL,EAAeQ,EAAGH,EAAS,CAAE,CAAE,EAC/BL,EAAeQ,EAAGH,EAAS,CAAE,CAAE,EAC/BL,EAAeQ,EAAGH,EAAS,CAAE,CAAE,CAChC,EACOJ,EAASE,EAAQC,EAAOC,EAASE,EAASD,CAAI,CACtD,CAKAP,EAAO,QAAUG,ICNjB,IAAIO,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "quaternary", "arrays", "shape", "strides", "offsets", "fcn", "sx", "sy", "sz", "sw", "su", "ix", "iy", "iz", "iw", "iu", "x", "y", "z", "w", "u", "N", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "quaternary", "arrays", "shape", "strides", "fcn", "offsets", "N", "setReadOnly", "main", "ndarray"]
}
